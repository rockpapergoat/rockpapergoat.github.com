<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[a rock, a paper, and a goat]]></title>
  <link href="http://rockpapergoat.github.com/atom.xml" rel="self"/>
  <link href="http://rockpapergoat.github.com/"/>
  <updated>2011-12-09T13:25:40-05:00</updated>
  <id>http://rockpapergoat.github.com/</id>
  <author>
    <name><![CDATA[nate st.germain]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[some tinkering with hashed passwords]]></title>
    <link href="http://rockpapergoat.github.com/blog/2011/12/09/some-tinkering-with-hashed-passwords/"/>
    <updated>2011-12-09T13:06:00-05:00</updated>
    <id>http://rockpapergoat.github.com/blog/2011/12/09/some-tinkering-with-hashed-passwords</id>
    <content type="html"><![CDATA[<p>the other night, <a href="http://twitter.com/#!/glarizza">gary</a> tweeted about a puppet/os x 10.7 password <a href="http://projects.puppetlabs.com/issues/11293">bug</a> i started looking at awhile back.</p>

<p>it&#8217;s good practice. i&#8217;ve been less focused on ruby lately than i&#8217;d like, and as <a href="http://sysadvent.blogspot.com/2011/12/day-6-always-be-hacking.html">@lusis</a> says: &#8220;always be hacking.&#8221;</p>

<p>here&#8217;s some notes from gary on the problem:</p>

<div><script src='https://gist.github.com/1445481.js?file='></script>
<noscript><pre><code>Password Hash Accessing:

* Grab plist file from /var/db/dslocal/nodes/Default/users/username.plist
* Convert to xml 

        plutil -convert xml1 username.plist
* Grab the ShadowHashData key and base64 decode it (install base64 with port install base64)

        echo &quot;Data from ShadowHashData Key&quot; | base64 -d &gt; ShadowHashData
* Convert the resultant binary plist file into xml

        plutil -convert xml1 ShadowHashData
* Grab the SALTED-SHA512 Key and base64 decode it

        echo &quot;Data from SALTED-SHA512 Key&quot; | base64 -d &gt; hashfile
*Reveal hash:

        xxd -p -c 256 hashfile | cut -c 9-


## Opening a user plist from 10.7 and getting the binary-encoded bit
        require 'rexml/document'
        xml = File.read('file.plist')
        doc = REXML::Document.new(xml)
        puts String(doc.root.elements[1][7][1][0]).gsub(&quot;\n&quot;,&quot;&quot;).gsub(&quot;\t&quot;,&quot;&quot;)

## Using CFPropertyList
        require 'cfpropertylist'
        require 'base64'
        newplist = CFPropertyList::List.new(:file =&gt; 'demouser_edit.plist')
        newdata = CFPropertyList.native_types(newplist.value)
        bplist = CFPropertyList::List.new
        bplist.load_binary_str(newdata['ShadowHashData'][0])
        bplistdata = CFPropertyList.native_types(bplist.value)
        password_hash = bplistdata['SALTED-SHA512'].unpack(&quot;H*&quot;)[0][8..-1]


Nate's Gist --&gt; https://gist.github.com/1445697</code></pre></noscript></div>


<p>and here&#8217;s a bit of what i worked out so far:</p>

<div><script src='https://gist.github.com/1445697.js?file='></script>
<noscript><pre><code>#!/usr/bin/env ruby
## parse os x 10.7 shado hash data
#
require &quot;rexml/document&quot;
include REXML
require &quot;base64&quot;

def parse_plist(plist)
    parsed = []
    doc = Document.new File.new(plist)
    doc.elements.each(&quot;plist/data&quot;) {|e| parsed &lt;&lt; e}
end

def base64_shadow(hash)
   encoded = Base64.encode64(hash) 
   decoded = Base64.decode64(Base64.encode64(hash))
   #puts &quot;encoded: #{encoded}&quot;
   #puts &quot;decoded: #{decoded}&quot;
end




puts parse_plist(&quot;/tmp/password.plist&quot;)
base64_shadow(&quot;password&quot;)
</code></pre></noscript></div>


<p>i always enjoy collaborating with people across the &#8216;tubes. there&#8217;s no real point to this post; just jotting down some thoughts while waiting for some processes to finish.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mcollective tinkering, part 2]]></title>
    <link href="http://rockpapergoat.github.com/blog/2011/11/23/mcollective-tinkering/"/>
    <updated>2011-11-23T18:53:00-05:00</updated>
    <id>http://rockpapergoat.github.com/blog/2011/11/23/mcollective-tinkering</id>
    <content type="html"><![CDATA[<p>following up the previous post, i have a working <a href="https://github.com/rockpapergoat/mcollective-plugins/tree/macutil/agent/macutil">agent</a> uploaded. so far, it doesn&#8217;t do too much.</p>

<p>i also sort of take back the gripe about agent documentation. i see now there&#8217;s some facility for including usage statements, though i&#8217;ve only seen them in application files, not agents. need to check the docs again&#8230;</p>

<p>next up is getting a handle on input and output syntax and doing more interesting things. i intend to gear the macutil agent toward common os x specific tasks one might want to perform, but as i&#8217;m running through a pile of utility scripts, it&#8217;s pretty obvious that so much of these one-off shell/ruby/python/whatever scripts are reactionary. there are many places where proper configuration management tools and processes are a more appropriate fit.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mcollective tinkering]]></title>
    <link href="http://rockpapergoat.github.com/blog/2011/11/21/mcollective-tinkering/"/>
    <updated>2011-11-21T16:54:00-05:00</updated>
    <id>http://rockpapergoat.github.com/blog/2011/11/21/mcollective-tinkering</id>
    <content type="html"><![CDATA[<p>yesterday&#8217;s afternoon activities included messing with <a href="http://puppetlabs.com/mcollective/introduction">mcollective</a> agents. i&#8217;m working on an agent that provides a lot of the same one-off, scripted checks that i&#8217;ve written in the past for os x clients. it should be somewhat useful, i hope.</p>

<p>i&#8217;ll be sure to commit whatever working pieces soon.</p>

<p>one of my minor annoyances with the mcollective documentation (which is generally good) is that it skips some of the really basic things, like how to invoke an agent from the command line. for instance, it&#8217;s helpful to provide examples of how to pass arguments, like so:</p>

<div><script src='https://gist.github.com/1384106.js?file='></script>
<noscript><pre><code> mco rpc etc_facts search -F &quot;operatingsystem=~/[dD]arwin/&quot; --arg=&quot;fact=form&quot;
</code></pre></noscript></div>


<p>i&#8217;ll add examples for how to call agents either in the ddl or agent code itself. seeing examples in the ddl via the built in help would be nice, though.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[a new blog]]></title>
    <link href="http://rockpapergoat.github.com/blog/2011/11/10/a-new-blog/"/>
    <updated>2011-11-10T20:36:00-05:00</updated>
    <id>http://rockpapergoat.github.com/blog/2011/11/10/a-new-blog</id>
    <content type="html"><![CDATA[<p>after a long hiatus, i&#8217;m starting a new blog using <a href="http://octopress.org">octopress</a>. my <a href="http://nate.adullmoment.com">old blog</a> was built using <a href="http://hobix.github.com/hobix/">hobix</a>, which has been abandoned for a few years now. after <a href="http://en.wikipedia.org/wiki/Why_the_lucky_stiff">why</a> disappeared, there hasn&#8217;t been much development with hobix. i also haven&#8217;t had the time or inclination to fix the things that are broken with my install.</p>

<p>so we&#8217;ll see how this goes. twitter has replaced regular blogging for most people i know.</p>

<p>i have a couple of other blogs out there that get sporadic updates. i&#8217;ll link to those, as well.</p>
]]></content>
  </entry>
  
</feed>
